%option noyywrap
%option yylineno

%{
    #include "parser.tab.h"
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
%}

LID      [a-zA-Z_][a-zA-Z0-9_]*
LINTEGER [-+]?[0-9]+
WS       [ \t\r\n]+

%%
"#"             { return HASH; }
"<<"            { return LEFT_SHIFT; }
">>"            { return RIGHT_SHIFT; }
"<"             { return LESS_THAN; }
">"             { return GREATER_THAN; }
"{"             { return LEFT_BRACE; }
"}"             { return RIGHT_BRACE; }
"("             { return LEFT_PAREN; }
")"             { return RIGHT_PAREN; }
";"             { return SEMICOLON; }
","             { return COMMA; }
"+"             { yylval.value = strdup(yytext); return PLUS; }
"-"             { yylval.value = strdup(yytext); return MINUS; }
"*"             { yylval.value = strdup(yytext); return MULTIPLY; }
"/"             { yylval.value = strdup(yytext); return DIVIDE; }
"="             { return EQUAL; }
"cout"          { return COUT; }
"cin"           { return CIN; }
"return"        { return RETURN; }
"using"         { return USING; }
"namespace"     { return NAMESPACE; }
"std"           { return STD; }
"include"       { return INCLUDE; }
"iostream"      { return IOSTREAM; }
"main"          { return MAIN; }
"int"           { return INT; }

{LINTEGER}      {
                    yylval.value = strdup(yytext);
                    return CONST;
                }

{LID}           {
                    if (yyleng <= 8) {
                        yylval.value = strdup(yytext);
                        return ID;
                    }
                    fprintf(stderr, "Error at line %d. Length extended 8 characters.\n", yylineno);
                    exit(1);
                }

{WS}+           { /* ignoră spațiile albe */ }
.               {
                    fprintf(stderr, "Error at line %d. Unexpected character: %s\n", yylineno, yytext);
                    exit(1);
                }
%%
